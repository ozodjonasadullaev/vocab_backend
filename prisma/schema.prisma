generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  email              String               @unique
  hash               String
  firstName          String?
  lastName           String?
  phone              String?
  country            String?
  learningLanguages  Int[]             @default([1])
  role               String               @default("user")
  courses            Course[]             @relation("UserCourses")
  asssesments        Assessment[]
  userCourseProgress UserCourseProgress[]
  userLessonProgress UserLessonProgress[]
  languageId         Int?
}

model Language {
  id      Int      @id @default(autoincrement())
  name    String
  courses Course[]
}

model Course {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String
  description        String?
  level              String
  availableLanguages String[]
  languageId         Int
  language           Language             @relation(fields: [languageId], references: [id])
  lessons            Lesson[]
  assesments         Assessment[]
  users              User[]               @relation("UserCourses")
  userCourseProgress UserCourseProgress[]
}

model Lesson {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  title              String
  description        String?
  courseId           Int
  course             Course               @relation(fields: [courseId], references: [id])
  words              Word[]
  userLessonProgress UserLessonProgress[]
}

model Word {
  id          Int        @id @default(autoincrement())
  word        String
  translation Json
  lessonId    Int
  imageUrl    String?
  lesson      Lesson     @relation(fields: [lessonId], references: [id])
  sentences   Sentence[] @relation("WordSentences")
}

model Sentence {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  words     Word[]   @relation("WordSentences")
}

model UserCourseProgress {
  id             Int                  @id @default(autoincrement())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  courseId       Int
  userId         Int
  percentage     Int
  lessonProgress UserLessonProgress[]
  course         Course               @relation(fields: [courseId], references: [id])
  user           User                 @relation(fields: [userId], references: [id])
}

model UserLessonProgress {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  lessonId         Int
  userId           Int
  courseProgressId Int
  percentage       Int

  givenWords     Int
  completedWords Int

  lesson         Lesson             @relation(fields: [lessonId], references: [id])
  user           User               @relation(fields: [userId], references: [id])
  courseProgress UserCourseProgress @relation(fields: [courseProgressId], references: [id])
}

model Assessment {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  courseId    Int
  userId      Int
  score       Int?
  isCompleted Boolean  @default(false)
  course      Course   @relation(fields: [courseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}
