generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      String   @default("user") //user , free-trial-user, subscriber, admin, moderator

  email String @unique
  hash  String

  firstName          String?
  lastName           String?
  country            String?
  learningLanguages  String[]             @default(["english"])
  subscriptionType   Int? //1 oy, 3 oy, 6 oy, 12oy
  subscribedAt       DateTime?
  courses            Course[]             @relation("UserCourses")
  userCourseProgress UserCourseProgress[]
  userLessonProgress UserLessonProgress[]
}

model Language {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[]
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title              String
  description        String?
  availableLanguages String[]
  langageId          Int
  language           Language             @relation(fields: [langageId], references: [id])
  users              User[]               @relation("UserCourses")
  lessons            Lesson[]
  userCourseProgress UserCourseProgress[]
}

model Lesson {
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String?
  courseId           Int
  course             Course               @relation(fields: [courseId], references: [id])
  words              Word[]
  userLessonProgress UserLessonProgress[]
}

model Word {
  id          Int        @id @default(autoincrement())
  word        String
  translation Json
  lessonId    Int
  lesson      Lesson     @relation(fields: [lessonId], references: [id])
  sentences   Sentence[] @relation("WordSentences")
}

model Sentence {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentence  String?
  langageId Int
  words     Word[]  @relation("WordSentences")
}

model UserCourseProgress {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    Int
  userId      Int
  isEnrolled  Boolean  @default(false)
  isCompleted Boolean  @default(false)
  course      Course   @relation(fields: [courseId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model UserLessonProgress {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessonId    Int
  userId      Int
  isCompleted Boolean  @default(false)
  lesson      Lesson   @relation(fields: [lessonId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}
